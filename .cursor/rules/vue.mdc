---
description: 
globs: *.vue
alwaysApply: false
---
## FRONTEND

### Guidelines for VUE

#### VUE_CODING_STANDARDS

- Use the Composition API instead of the Options API for better type inference and code reuse
- Implement <script setup lang="ts"> for more concise component definitions
- Use `Suspense` and async components for handling loading states during code-splitting
- Use `defineModel` in child components to simplify two-way binding with parent state.
- Leverage the `defineProps` and defineEmits macros for type-safe props and events
- Use the new `defineOptions` for additional component options
- Implement `provide`/`inject` for dependency injection instead of prop drilling in deeply nested components
- Use the Teleport component for portal-like functionality to render UI elsewhere in the DOM
- Leverage ref over reactive for primitive values to avoid unintended unwrapping
- Use `v-memo` for performance optimization in render-heavy list rendering scenarios
- Implement shallow refs for large objects that don't need deep reactivity
- Use `useTemplateRef` instead of the default `ref` to get a component reference.
- Always use `computed` properties instead of method calls in <template></template> for data transformations and filtering


